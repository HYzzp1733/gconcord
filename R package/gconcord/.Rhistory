library(Rcpp)
library(devtools)
install.packages("devtools")
install.packages("roxygen2")
install.packages("testthat")
install.packages("knitr")
library(devtools)
library(gconcord)
devtools::document()
?matrix
############################################################################
x <- matrix(c(
-0.57299987, -1.22881728,  0.24802264,  0.59779037,  0.65240208, 0.89373708,
0.84087632, -0.3383771 ,  0.0794175 ,  0.12716686, -0.97403288,-0.30804861,
0.13180135, -0.35350249,  0.01601294,  0.30258641,  0.19927309, 0.95847883,
0.44658609,  0.12839939, -2.36179304, -3.2224078 , -0.92297796,-1.55831917,
-1.00001779, -0.08302829,  0.6814525 ,  0.31812938, -0.50994963,-0.39614266,
-0.3653738 , -0.20899641,  0.33488842,  0.93276311,  0.18263188,-1.58771894,
0.53065032, -0.61604128, -0.67789621,  0.48183976,  0.20767173, 0.20307444,
-0.13368724, -0.12181896, -0.52881865, -0.91883273, -0.35672818,-0.09414685,
-1.23926047, -0.02615426, -1.02995135, -0.99250009, -0.89672846,-0.54350656,
-0.97725987, -0.95743644, -0.47911092, -0.22157924,  1.8751929 , 1.04114063,
1.4149165 ,  0.93326499, -0.09200369,  0.03342898,  1.71023076, 1.82671778,
0.19710653, -0.94066402, -1.15043928,  0.88932662,  0.3247554 ,-0.87942537
), nrow = 12, ncol = 6, byrow = TRUE)
x
############################################################################
x <- matrix(c(
-0.57299987, -1.22881728,  0.24802264,  0.59779037,  0.65240208, 0.89373708,
0.84087632, -0.3383771 ,  0.0794175 ,  0.12716686, -0.97403288,-0.30804861,
0.13180135, -0.35350249,  0.01601294,  0.30258641,  0.19927309, 0.95847883,
0.44658609,  0.12839939, -2.36179304, -3.2224078 , -0.92297796,-1.55831917,
-1.00001779, -0.08302829,  0.6814525 ,  0.31812938, -0.50994963,-0.39614266,
-0.3653738 , -0.20899641,  0.33488842,  0.93276311,  0.18263188,-1.58771894,
0.53065032, -0.61604128, -0.67789621,  0.48183976,  0.20767173, 0.20307444,
-0.13368724, -0.12181896, -0.52881865, -0.91883273, -0.35672818,-0.09414685,
-1.23926047, -0.02615426, -1.02995135, -0.99250009, -0.89672846,-0.54350656,
-0.97725987, -0.95743644, -0.47911092, -0.22157924,  1.8751929 , 1.04114063,
1.4149165 ,  0.93326499, -0.09200369,  0.03342898,  1.71023076, 1.82671778,
0.19710653, -0.94066402, -1.15043928,  0.88932662,  0.3247554 ,-0.87942537
), nrow = 12, ncol = 6, byrow = TRUE)
x.center <- scale(x, center = TRUE, scale = FALSE)
S = cov(x.center)
lam1 <- (matrix(1, 6, 6) - diag(6)) * 0.1
lam2 <- 0.1
tol = 1e-7
maxit = 100
steptype = 1
out <- .Call("_gconcord_ccista_conv",
PACKAGE = 'gconcord',
S,
as(X0, 'dgCMatrix'),
lam1,
as.double(lam2),
as.double(tol),
# as.integer(nitr),
as.integer(maxit),
as.integer(steptype)
)
X0 = diag(6)
out <- .Call("_gconcord_ccista_conv",
PACKAGE = 'gconcord',
S,
as(X0, 'dgCMatrix'),
lam1,
as.double(lam2),
as.double(tol),
# as.integer(nitr),
as.integer(maxit),
as.integer(steptype)
)
out
as.matrix(out$out)
round(as.matrix(out$out),4)
X0 = diag(6)
out <- .Call("_gconcord_ccista_conv",
PACKAGE = 'gconcord',
S,
as(X0, 'dgCMatrix'),
lam1,
as.double(lam2),
as.double(tol),
# as.integer(nitr),
as.integer(maxit),
as.integer(steptype)
)
## coordinatewise
round(as.matrix(out$out),4)
out <- .Call("_gconcord_ccorig_conv",
PACKAGE = 'gconcord',
S,
X0,
lam1,
as.double(lam2),
as.double(tol),
# as.integer(nitr),
as.integer(maxit)
)
round(as.matrix(out$out),4)
out <- .Call("_gconcord_ccista_conv",
PACKAGE = 'gconcord',
S,
as(X0, 'dgCMatrix'),
lam1,
as.double(lam2),
as.double(tol),
# as.integer(nitr),
as.integer(maxit),
as.integer(steptype)
)
round(as.matrix(out$out),4)
out <- .Call("_gconcord_ccfista_conv",
PACKAGE = 'gconcord',
S,
as(X0, 'dgCMatrix'),
lam1,
as.double(lam2),
as.double(tol),
# as.integer(nitr),
as.integer(maxit),
as.integer(steptype)
)
round(as.matrix(out$out),4)
library(gconcord)
devtools::document()
############################################################################
x <- matrix(c(
-0.57299987, -1.22881728,  0.24802264,  0.59779037,  0.65240208, 0.89373708,
0.84087632, -0.3383771 ,  0.0794175 ,  0.12716686, -0.97403288,-0.30804861,
0.13180135, -0.35350249,  0.01601294,  0.30258641,  0.19927309, 0.95847883,
0.44658609,  0.12839939, -2.36179304, -3.2224078 , -0.92297796,-1.55831917,
-1.00001779, -0.08302829,  0.6814525 ,  0.31812938, -0.50994963,-0.39614266,
-0.3653738 , -0.20899641,  0.33488842,  0.93276311,  0.18263188,-1.58771894,
0.53065032, -0.61604128, -0.67789621,  0.48183976,  0.20767173, 0.20307444,
-0.13368724, -0.12181896, -0.52881865, -0.91883273, -0.35672818,-0.09414685,
-1.23926047, -0.02615426, -1.02995135, -0.99250009, -0.89672846,-0.54350656,
-0.97725987, -0.95743644, -0.47911092, -0.22157924,  1.8751929 , 1.04114063,
1.4149165 ,  0.93326499, -0.09200369,  0.03342898,  1.71023076, 1.82671778,
0.19710653, -0.94066402, -1.15043928,  0.88932662,  0.3247554 ,-0.87942537
), nrow = 12, ncol = 6, byrow = TRUE)
S = cov(x)
omega = gconcord(S, lambda1 = 0.2, lambda2 = 0.05, method = "ista")$omega
omega = gconcord(S, lambda1 = 0.2, lambda2 = 0.05, method = "ista")
omega
S
std = sqrt(diag(S))
S = diag(1/std) %*% S %*% diag(1/std)
s
S
p = nrow(S)
nitr = 0
X0 = diag(1, p)  ## initial estimate of precision matrix
res = check.penalty( lambda1, lambda2, p ) ## obtain penalty parameters
Dtr = data[train,]
lambda1 = 0.2
lambda2 = 0.05
method = "ista"
res = check.penalty( lambda1, lambda2, p ) ## obtain penalty parameters
lam1 = res$lam1
lam2 = res$lam2
lam1
out <- .Call("_gconcord_ccista_conv",
PACKAGE = 'gconcord',
S,
as(X0, 'dgCMatrix'),
lam1,
as.double(lam2),
as.double(tol),
# as.integer(nitr),
as.integer(maxit),
as.integer(steptype)
)
tol=1e-5
maxit=100
steptype=0
out <- .Call("_gconcord_ccista_conv",
PACKAGE = 'gconcord',
S,
as(X0, 'dgCMatrix'),
lam1,
as.double(lam2),
as.double(tol),
# as.integer(nitr),
as.integer(maxit),
as.integer(steptype)
)
out
1/std
diag(1/std) %*% matrix(out$out, p, p)
diag(1/std) %*% matrix(out$out, p, p) %*% diag(1/std)
omega = gconcord(S, lambda1 = 0.2, lambda2 = 0.05, method = "ista")
omega
devtools::test()
devtools::test()
devtools::test()
############################################################################
rm(list=ls())
devtools::test()
x <- matrix(c(
-0.57299987, -1.22881728,  0.24802264,  0.59779037,  0.65240208, 0.89373708,
0.84087632, -0.3383771 ,  0.0794175 ,  0.12716686, -0.97403288,-0.30804861,
0.13180135, -0.35350249,  0.01601294,  0.30258641,  0.19927309, 0.95847883,
0.44658609,  0.12839939, -2.36179304, -3.2224078 , -0.92297796,-1.55831917,
-1.00001779, -0.08302829,  0.6814525 ,  0.31812938, -0.50994963,-0.39614266,
-0.3653738 , -0.20899641,  0.33488842,  0.93276311,  0.18263188,-1.58771894,
0.53065032, -0.61604128, -0.67789621,  0.48183976,  0.20767173, 0.20307444,
-0.13368724, -0.12181896, -0.52881865, -0.91883273, -0.35672818,-0.09414685,
-1.23926047, -0.02615426, -1.02995135, -0.99250009, -0.89672846,-0.54350656,
-0.97725987, -0.95743644, -0.47911092, -0.22157924,  1.8751929 , 1.04114063,
1.4149165 ,  0.93326499, -0.09200369,  0.03342898,  1.71023076, 1.82671778,
0.19710653, -0.94066402, -1.15043928,  0.88932662,  0.3247554 ,-0.87942537
), nrow = 12, ncol = 6, byrow = TRUE)
lambda1 = 0.2
lambda2 = 0.05
method = "ista"
tol=1e-5
maxit=100
steptype=0
std = sqrt(diag(S))
S = diag(1/std) %*% S %*% diag(1/std)
p = nrow(S)
nitr = 0
X0 = diag(1, p)  ## initial estimate of precision matrix
res = check.penalty( lambda1, lambda2, p ) ## obtain penalty parameters
p = nrow(S)
S = cov(x)
std = sqrt(diag(S))
S = diag(1/std) %*% S %*% diag(1/std)
p = nrow(S)
nitr = 0
X0 = diag(1, p)  ## initial estimate of precision matrix
res = check.penalty( lambda1, lambda2, p ) ## obtain penalty parameters
lam1 = res$lam1
lam2 = res$lam2
out <- .Call("_gconcord_ccista_conv",
PACKAGE = 'gconcord',
S,
as(X0, 'dgCMatrix'),
lam1,
as.double(lam2),
as.double(tol),
# as.integer(nitr),
as.integer(maxit),
as.integer(steptype)
)
out
diag(1/std) %*% matrix(out$out, p, p) %*% diag(1/std)
library(gconcord)
devtools::document()
devtools::test()
library(gconcord)
devtools::document()
devtools::test()
x <- matrix(c(
-0.57299987, -1.22881728,  0.24802264,  0.59779037,  0.65240208, 0.89373708,
0.84087632, -0.3383771 ,  0.0794175 ,  0.12716686, -0.97403288,-0.30804861,
0.13180135, -0.35350249,  0.01601294,  0.30258641,  0.19927309, 0.95847883,
0.44658609,  0.12839939, -2.36179304, -3.2224078 , -0.92297796,-1.55831917,
-1.00001779, -0.08302829,  0.6814525 ,  0.31812938, -0.50994963,-0.39614266,
-0.3653738 , -0.20899641,  0.33488842,  0.93276311,  0.18263188,-1.58771894,
0.53065032, -0.61604128, -0.67789621,  0.48183976,  0.20767173, 0.20307444,
-0.13368724, -0.12181896, -0.52881865, -0.91883273, -0.35672818,-0.09414685,
-1.23926047, -0.02615426, -1.02995135, -0.99250009, -0.89672846,-0.54350656,
-0.97725987, -0.95743644, -0.47911092, -0.22157924,  1.8751929 , 1.04114063,
1.4149165 ,  0.93326499, -0.09200369,  0.03342898,  1.71023076, 1.82671778,
0.19710653, -0.94066402, -1.15043928,  0.88932662,  0.3247554 ,-0.87942537
), nrow = 12, ncol = 6, byrow = TRUE)
x
S = cov(x)
S
print(gconcord(S, lambda1 = 0.2, lambda2 = 0.05, method = "ista"))
omega = gconcord(S, lambda1 = 0.2, lambda2 = 0.05, method = "ista")
S %*% omega
S
library(gconcord)
devtools::document()
devtools::test()
x
dim(x)
S
std = sqrt(diag(S))
std
library(gconcord)
devtools::document()
x <- matrix(c(
-0.57299987, -1.22881728,  0.24802264,  0.59779037,  0.65240208, 0.89373708,
0.84087632, -0.3383771 ,  0.0794175 ,  0.12716686, -0.97403288,-0.30804861,
0.13180135, -0.35350249,  0.01601294,  0.30258641,  0.19927309, 0.95847883,
0.44658609,  0.12839939, -2.36179304, -3.2224078 , -0.92297796,-1.55831917,
-1.00001779, -0.08302829,  0.6814525 ,  0.31812938, -0.50994963,-0.39614266,
-0.3653738 , -0.20899641,  0.33488842,  0.93276311,  0.18263188,-1.58771894,
0.53065032, -0.61604128, -0.67789621,  0.48183976,  0.20767173, 0.20307444,
-0.13368724, -0.12181896, -0.52881865, -0.91883273, -0.35672818,-0.09414685,
-1.23926047, -0.02615426, -1.02995135, -0.99250009, -0.89672846,-0.54350656,
-0.97725987, -0.95743644, -0.47911092, -0.22157924,  1.8751929 , 1.04114063,
1.4149165 ,  0.93326499, -0.09200369,  0.03342898,  1.71023076, 1.82671778,
0.19710653, -0.94066402, -1.15043928,  0.88932662,  0.3247554 ,-0.87942537
), nrow = 12, ncol = 6, byrow = TRUE)
S = cov(x)
print(gconcord(S, lambda1 = 0.2, lambda2 = 0.05, method = "ista"))
library(gconcord)
devtools::document()
print(gconcord(S, lambda1 = 0.2, lambda2 = 0.05, method = "ista"))
library(gconcord)
devtools::document()
x <- matrix(c(
-0.57299987, -1.22881728,  0.24802264,  0.59779037,  0.65240208, 0.89373708,
0.84087632, -0.3383771 ,  0.0794175 ,  0.12716686, -0.97403288,-0.30804861,
0.13180135, -0.35350249,  0.01601294,  0.30258641,  0.19927309, 0.95847883,
0.44658609,  0.12839939, -2.36179304, -3.2224078 , -0.92297796,-1.55831917,
-1.00001779, -0.08302829,  0.6814525 ,  0.31812938, -0.50994963,-0.39614266,
-0.3653738 , -0.20899641,  0.33488842,  0.93276311,  0.18263188,-1.58771894,
0.53065032, -0.61604128, -0.67789621,  0.48183976,  0.20767173, 0.20307444,
-0.13368724, -0.12181896, -0.52881865, -0.91883273, -0.35672818,-0.09414685,
-1.23926047, -0.02615426, -1.02995135, -0.99250009, -0.89672846,-0.54350656,
-0.97725987, -0.95743644, -0.47911092, -0.22157924,  1.8751929 , 1.04114063,
1.4149165 ,  0.93326499, -0.09200369,  0.03342898,  1.71023076, 1.82671778,
0.19710653, -0.94066402, -1.15043928,  0.88932662,  0.3247554 ,-0.87942537
), nrow = 12, ncol = 6, byrow = TRUE)
S = cov(x)
S
print(gconcord(S, lambda1 = 0.2, lambda2 = 0.05, method = "ista"))
print(gconcord(S = S, lambda1 = 0.2, lambda2 = 0.05, method = "ista"))
omega = gconcord(S, lambda1 = 0.2, lambda2 = 0.05, method = "ista")
library(gconcord)
x <- matrix(c(
-0.57299987, -1.22881728,  0.24802264,  0.59779037,  0.65240208, 0.89373708,
0.84087632, -0.3383771 ,  0.0794175 ,  0.12716686, -0.97403288,-0.30804861,
0.13180135, -0.35350249,  0.01601294,  0.30258641,  0.19927309, 0.95847883,
0.44658609,  0.12839939, -2.36179304, -3.2224078 , -0.92297796,-1.55831917,
-1.00001779, -0.08302829,  0.6814525 ,  0.31812938, -0.50994963,-0.39614266,
-0.3653738 , -0.20899641,  0.33488842,  0.93276311,  0.18263188,-1.58771894,
0.53065032, -0.61604128, -0.67789621,  0.48183976,  0.20767173, 0.20307444,
-0.13368724, -0.12181896, -0.52881865, -0.91883273, -0.35672818,-0.09414685,
-1.23926047, -0.02615426, -1.02995135, -0.99250009, -0.89672846,-0.54350656,
-0.97725987, -0.95743644, -0.47911092, -0.22157924,  1.8751929 , 1.04114063,
1.4149165 ,  0.93326499, -0.09200369,  0.03342898,  1.71023076, 1.82671778,
0.19710653, -0.94066402, -1.15043928,  0.88932662,  0.3247554 ,-0.87942537
), nrow = 12, ncol = 6, byrow = TRUE)
S = cov(x)
print(gconcord(S = S, lambda1 = 0.2, lambda2 = 0.05, method = "ista"))
omega = gconcord(S, lambda1 = 0.2, lambda2 = 0.05, method = "ista")
round(omega, 4)
omega = gconcord(S = S, lambda1 = 0.2, lambda2 = 0.05, method = "ista")
round(omega, 4)
rm(list=ls())
x <- matrix(c(
-0.57299987, -1.22881728,  0.24802264,  0.59779037,  0.65240208, 0.89373708,
0.84087632, -0.3383771 ,  0.0794175 ,  0.12716686, -0.97403288,-0.30804861,
0.13180135, -0.35350249,  0.01601294,  0.30258641,  0.19927309, 0.95847883,
0.44658609,  0.12839939, -2.36179304, -3.2224078 , -0.92297796,-1.55831917,
-1.00001779, -0.08302829,  0.6814525 ,  0.31812938, -0.50994963,-0.39614266,
-0.3653738 , -0.20899641,  0.33488842,  0.93276311,  0.18263188,-1.58771894,
0.53065032, -0.61604128, -0.67789621,  0.48183976,  0.20767173, 0.20307444,
-0.13368724, -0.12181896, -0.52881865, -0.91883273, -0.35672818,-0.09414685,
-1.23926047, -0.02615426, -1.02995135, -0.99250009, -0.89672846,-0.54350656,
-0.97725987, -0.95743644, -0.47911092, -0.22157924,  1.8751929 , 1.04114063,
1.4149165 ,  0.93326499, -0.09200369,  0.03342898,  1.71023076, 1.82671778,
0.19710653, -0.94066402, -1.15043928,  0.88932662,  0.3247554 ,-0.87942537
), nrow = 12, ncol = 6, byrow = TRUE)
S = cov(x)
print(gconcord(S = S, lambda1 = 0.2, lambda2 = 0.05, method = "ista"))
omega = gconcord(S = S, lambda1 = 0.2, lambda2 = 0.05, method = "ista")
library(gconcord)
devtools::document()
x <- matrix(c(
-0.57299987, -1.22881728,  0.24802264,  0.59779037,  0.65240208, 0.89373708,
0.84087632, -0.3383771 ,  0.0794175 ,  0.12716686, -0.97403288,-0.30804861,
0.13180135, -0.35350249,  0.01601294,  0.30258641,  0.19927309, 0.95847883,
0.44658609,  0.12839939, -2.36179304, -3.2224078 , -0.92297796,-1.55831917,
-1.00001779, -0.08302829,  0.6814525 ,  0.31812938, -0.50994963,-0.39614266,
-0.3653738 , -0.20899641,  0.33488842,  0.93276311,  0.18263188,-1.58771894,
0.53065032, -0.61604128, -0.67789621,  0.48183976,  0.20767173, 0.20307444,
-0.13368724, -0.12181896, -0.52881865, -0.91883273, -0.35672818,-0.09414685,
-1.23926047, -0.02615426, -1.02995135, -0.99250009, -0.89672846,-0.54350656,
-0.97725987, -0.95743644, -0.47911092, -0.22157924,  1.8751929 , 1.04114063,
1.4149165 ,  0.93326499, -0.09200369,  0.03342898,  1.71023076, 1.82671778,
0.19710653, -0.94066402, -1.15043928,  0.88932662,  0.3247554 ,-0.87942537
), nrow = 12, ncol = 6, byrow = TRUE)
S = cov(x)
print(gconcord(S = S, lambda1 = 0.2, lambda2 = 0.05, method = "ista"))
omega = gconcord(S = S, lambda1 = 0.2, lambda2 = 0.05, method = "ista")
omega
round(omega,3)
library(gconcord)
devtools::document()
rm(list = ls())
set.seed(1)
rd <- mvrnorm(100, mu = rep(0,20), Sigma = diag(20))
sigma <- cov(rd)
rm(list = ls())
library(MASS)
set.seed(1)
rd <- mvrnorm(100, mu = rep(0,20), Sigma = diag(20))
sigma <- cov(rd)
set.seed(1)
data <- mvrnorm(10000, mu = rep(0,20), Sigma = sigma)
iset <- c(10, 12, 15, 18, 20, 40, 100, 200, 500, 1000, 2000, 4000, 6000, 10000)
lamset <- rep(0, length(iset))
i = 1
subd <- data[1:i,]
set.seed(i)
cv <- cv.gconcord(data = subd, lam2.vec = 0)
library(MASS); library(gconcord)
cv <- cv.gconcord(data = subd, lam2.vec = 0)
data = subd
lam2.vec = 0
K = 3
method = "coordinatewise"
tol = 1e-5
maxit = 100
steptype = 0
rand <- sample( cut(seq.int(nrow(data)), breaks = K, labels = FALSE) )
cut(seq.int(nrow(data))
)
cut(seq.int(nrow(data)), breaks = K, labels = FALSE)
nrow(data)
library(gconcord)
devtools::document()
devtools::build()
knitr::opts_chunk$set(cache = TRUE)
indent1 = '    '
indent2 = paste(rep(indent1, 2), collapse='')
indent3 = paste(rep(indent1, 3), collapse='')
library(gconcord)
data = get.data( start = "2017-12-01", end = "2017-12-31", type = "return")
dim(data)
set.seed(1)
res1 = cv.gconcord(data, K = 5)
res1$lam1.optimal  ## optimal lambda1
res1$lam2.optimal  ## optimal lambda2
negL <- function(omega, data){
n <- nrow(data)
loss <- -n * log(max(det(omega), 1e-15)) + ## add a threshold to avoid log(0)
sum(diag(omega %*% t(data) %*% data))
return(loss)
}
set.seed(1)
res2 = cv.gconcord(data, K = 5, FUN = negL)
res2$lam1.optimal   ## optimal lambda1
res2$lam2.optimal   ## optimal lambda2
p1 <- cvplot(res1$val.error, main = "Loss values")
p2 <- cvplot(res1$val.error.quantile, main = "Loss quantiles")
library(gridExtra)
grid.arrange(p1, p2, ncol = 2)
p1 <- cvplot(res2$val.error, main = "Loss values")
p2 <- cvplot(res2$val.error.quantile, main = "Loss quantiles")
grid.arrange(p1, p2, ncol = 2)
omega1 <- gconcord(data = data, lambda1 = res1$lam1.optimal,
lambda2 = res1$lam2.optimal)
omega2 <- gconcord(data = data, lambda1 = res2$lam1.optimal,
lambda2 = res2$lam2.optimal)
p1 <- graphplot(omega1$omega, edge.width = 0.5, varnames = colnames(data),
main = "Predictive risk")
omega1 <- gconcord(data = data, lambda1 = res1$lam1.optimal,
lambda2 = res1$lam2.optimal)
omega2 <- gconcord(data = data, lambda1 = res2$lam1.optimal,
lambda2 = res2$lam2.optimal)
p1 <- graphplot(omega1, edge.width = 0.5, varnames = colnames(data),
main = "Predictive risk")
p2 <- graphplot(omega2, edge.width = 0.5, varnames = colnames(data),
main = "Negative log-likelihood")
grid.arrange(p1, p2, ncol = 2)
# Define categories
All <- colnames(data)
Tech <- c("AAPL","CSCO","IBM","INTC","MSFT","V") ## Technology
Food <- c("HD","KO","MCD","NKE","PG","WMT")      ## Food
Pham <- c("JNJ","MRK","PFE","UNH")               ## Pharmaceuticals
Cons <- c("BA","CAT","MMM","UTX")                ## Construction
Fina <- c("AXP","GS","JPM","TRV")                ## Finance
Engy <- c("CVX","GE","XOM")                      ## Energy
Chem <- c("DWDP")                                ## Chemistry
Ettm <- c("DIS")                                 ## Entertainment
Tele <- c("VZ")                                  ## Telecommunication
# Construct prior penalty matrix Lambda
Lam <- matrix(100, ncol(data), ncol(data), dimnames = list(All, All))
Lam[Tech, Tech] <- 0.01
Lam[Food, Food] <- 0.02
Lam[Pham, Pham] <- 0.05
Lam[Cons, Cons] <- 0.01
Lam[Fina, Fina] <- 0.01
Lam[Engy, Engy] <- 0.03
Lam[Chem, Chem] <- 0.04
Lam[Ettm, Ettm] <- 0.05
Lam[Tele, Tele] <- 0.04
# Negative log-likelihood loss function
res4 <- cv.gconcord(data = data, lam1.vec = Lam, K = 5, FUN = negL)
par(mfrow=c(1,2))
cvplot(res4$val.error, ylab = "Loss values")
cvplot(res4$val.error.quantile, ylab = "Loss quantiles")
omega3 <- gconcord(data = data, lambda1 = res3$lam1.optimal, lambda2 = res3$lam2.optimal)
# Predictive risk loss function
res3 <- cv.gconcord(data = data, lam1.vec = Lam, K = 5)
par(mfrow=c(1,2))
cvplot(res3$val.error, ylab = "Loss values")
cvplot(res3$val.error.quantile, ylab = "Loss quantiles")
omega3 <- gconcord(data = data, lambda1 = res3$lam1.optimal, lambda2 = res3$lam2.optimal)
omega4 <- gconcord(data = data, lambda1 = res4$lam1.optimal, lambda2 = res4$lam2.optimal)
p1 <- graphplot(omega3, edge.width = 0.5, varnames = colnames(data),
main = "Predictive risk")
p2 <- graphplot(omega4, edge.width = 0.5, varnames = colnames(data),
main = "Negative log-likelihood")
grid.arrange(p1, p2, ncol = 2)
data2 = get.data( start = "2008-03-01", end = "2008-03-31", na.rm = FALSE)
# Assume data are not available and only S is available
S = cov(data2, use = "complete.obs")   ## assume only S is available
omega <- gconcord(S = S, lambda1 = 0.2, lambda2 = 0.1)
devtools::build()
devtools::build()
library(kableExtra)
install.packages("kableExtra")
devtools::build()

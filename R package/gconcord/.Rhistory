maxit = 100
steptype = 0
rand <- sample( cut(seq.int(nrow(data)), breaks = K, labels = FALSE) )
cut(seq.int(nrow(data))
)
cut(seq.int(nrow(data)), breaks = K, labels = FALSE)
nrow(data)
library(gconcord)
devtools::document()
devtools::build()
knitr::opts_chunk$set(cache = TRUE)
indent1 = '    '
indent2 = paste(rep(indent1, 2), collapse='')
indent3 = paste(rep(indent1, 3), collapse='')
library(gconcord)
data = get.data( start = "2017-12-01", end = "2017-12-31", type = "return")
dim(data)
set.seed(1)
res1 = cv.gconcord(data, K = 5)
res1$lam1.optimal  ## optimal lambda1
res1$lam2.optimal  ## optimal lambda2
negL <- function(omega, data){
n <- nrow(data)
loss <- -n * log(max(det(omega), 1e-15)) + ## add a threshold to avoid log(0)
sum(diag(omega %*% t(data) %*% data))
return(loss)
}
set.seed(1)
res2 = cv.gconcord(data, K = 5, FUN = negL)
res2$lam1.optimal   ## optimal lambda1
res2$lam2.optimal   ## optimal lambda2
p1 <- cvplot(res1$val.error, main = "Loss values")
p2 <- cvplot(res1$val.error.quantile, main = "Loss quantiles")
library(gridExtra)
grid.arrange(p1, p2, ncol = 2)
p1 <- cvplot(res2$val.error, main = "Loss values")
p2 <- cvplot(res2$val.error.quantile, main = "Loss quantiles")
grid.arrange(p1, p2, ncol = 2)
omega1 <- gconcord(data = data, lambda1 = res1$lam1.optimal,
lambda2 = res1$lam2.optimal)
omega2 <- gconcord(data = data, lambda1 = res2$lam1.optimal,
lambda2 = res2$lam2.optimal)
p1 <- graphplot(omega1$omega, edge.width = 0.5, varnames = colnames(data),
main = "Predictive risk")
omega1 <- gconcord(data = data, lambda1 = res1$lam1.optimal,
lambda2 = res1$lam2.optimal)
omega2 <- gconcord(data = data, lambda1 = res2$lam1.optimal,
lambda2 = res2$lam2.optimal)
p1 <- graphplot(omega1, edge.width = 0.5, varnames = colnames(data),
main = "Predictive risk")
p2 <- graphplot(omega2, edge.width = 0.5, varnames = colnames(data),
main = "Negative log-likelihood")
grid.arrange(p1, p2, ncol = 2)
# Define categories
All <- colnames(data)
Tech <- c("AAPL","CSCO","IBM","INTC","MSFT","V") ## Technology
Food <- c("HD","KO","MCD","NKE","PG","WMT")      ## Food
Pham <- c("JNJ","MRK","PFE","UNH")               ## Pharmaceuticals
Cons <- c("BA","CAT","MMM","UTX")                ## Construction
Fina <- c("AXP","GS","JPM","TRV")                ## Finance
Engy <- c("CVX","GE","XOM")                      ## Energy
Chem <- c("DWDP")                                ## Chemistry
Ettm <- c("DIS")                                 ## Entertainment
Tele <- c("VZ")                                  ## Telecommunication
# Construct prior penalty matrix Lambda
Lam <- matrix(100, ncol(data), ncol(data), dimnames = list(All, All))
Lam[Tech, Tech] <- 0.01
Lam[Food, Food] <- 0.02
Lam[Pham, Pham] <- 0.05
Lam[Cons, Cons] <- 0.01
Lam[Fina, Fina] <- 0.01
Lam[Engy, Engy] <- 0.03
Lam[Chem, Chem] <- 0.04
Lam[Ettm, Ettm] <- 0.05
Lam[Tele, Tele] <- 0.04
# Negative log-likelihood loss function
res4 <- cv.gconcord(data = data, lam1.vec = Lam, K = 5, FUN = negL)
par(mfrow=c(1,2))
cvplot(res4$val.error, ylab = "Loss values")
cvplot(res4$val.error.quantile, ylab = "Loss quantiles")
omega3 <- gconcord(data = data, lambda1 = res3$lam1.optimal, lambda2 = res3$lam2.optimal)
# Predictive risk loss function
res3 <- cv.gconcord(data = data, lam1.vec = Lam, K = 5)
par(mfrow=c(1,2))
cvplot(res3$val.error, ylab = "Loss values")
cvplot(res3$val.error.quantile, ylab = "Loss quantiles")
omega3 <- gconcord(data = data, lambda1 = res3$lam1.optimal, lambda2 = res3$lam2.optimal)
omega4 <- gconcord(data = data, lambda1 = res4$lam1.optimal, lambda2 = res4$lam2.optimal)
p1 <- graphplot(omega3, edge.width = 0.5, varnames = colnames(data),
main = "Predictive risk")
p2 <- graphplot(omega4, edge.width = 0.5, varnames = colnames(data),
main = "Negative log-likelihood")
grid.arrange(p1, p2, ncol = 2)
data2 = get.data( start = "2008-03-01", end = "2008-03-31", na.rm = FALSE)
# Assume data are not available and only S is available
S = cov(data2, use = "complete.obs")   ## assume only S is available
omega <- gconcord(S = S, lambda1 = 0.2, lambda2 = 0.1)
devtools::build()
devtools::build()
library(kableExtra)
install.packages("kableExtra")
devtools::build()
devtools::build()
devtools::document()
library(gconcord)
devtools::document()
devtools::build()
?gconcord
?cv.gconcord
p = 50
n = 40
sigma = matrix(1,nrow = p,ncol = p)*0.5 + diag(1,p,p)*0.5
data <- round(mvrnorm(n, mu = rep(0,p), sigma),2)         # generate data
res <- cv.gconcord(data = data, lam2.vec = 0)
p = 50
n = 40
sigma = matrix(1,nrow = p,ncol = p)*0.5 + diag(1,p,p)*0.5
library(MASS)
data <- round(mvrnorm(n, mu = rep(0,p), sigma),2)         # generate data
res <- cv.gconcord(data = data, lam2.vec = 0)
cvplot(res$val.error.quantile)
library(gconcord)
devtools::document()
devtools::build()
library(devtools)
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("Rcpp")
library(Rcpp)
library(RcppEigen)
install.packages("RcppEigen")
library(gconcord)
devtools::document()
devtools::build()
install.packages("knitr")
devtools::build()
install.packages("lubridate")
library(lubridate)
library(gconcord)
devtools::document()
devtools::build()
library(gconcord)
install.packages("GGally")
install.packages("network")
devtools::document()
devtools::build()
install.packages("gridExtra")
install.packages("sna")
?repeat
)
replicate
?rep
rep(c(1,2), each = 2)
c("a","b")
ans <- data.frame(p = rep(c(500, 800, 1000, 1500, 2000), each = 3),
gamma = rep(c(0.5, 1, 2), 5),
coordinate.wise = c("0.39/76", "0.35/75", "0.35/74",
"5.82/78", "6.68/82", "5.78/83",
"10.35/74", "14.33/102", "14.27/100",
"52.52/92", "52.62/92", "56.25/100",
"119.04/87", "104.35/76", "119.29/87"))
ans
library(dplyr)
install.packages("dplyr")
library(dplyr)
knitr::opts_chunk$set(cache = TRUE)
indent1 = '    '
indent2 = paste(rep(indent1, 2), collapse='')
indent3 = paste(rep(indent1, 3), collapse='')
library(gconcord)
data = get.data( start = "2017-12-01", end = "2017-12-31", type = "return")
dim(data)
set.seed(1)
res1 = cv.gconcord(data, K = 5)
res1$lam1.optimal  ## optimal lambda1
res1$lam2.optimal  ## optimal lambda2
negL <- function(omega, data){
n <- nrow(data)
loss <- -n * log(max(det(omega), 1e-15)) + ## add a threshold to avoid log(0)
sum(diag(omega %*% t(data) %*% data))
return(loss)
}
set.seed(1)
res2 = cv.gconcord(data, K = 5, FUN = negL)
res2$lam1.optimal   ## optimal lambda1
res2$lam2.optimal   ## optimal lambda2
p1 <- cvplot(res1$val.error, main = "Loss values")
p2 <- cvplot(res1$val.error.quantile, main = "Loss quantiles")
library(gridExtra)
grid.arrange(p1, p2, ncol = 2)
p1 <- cvplot(res2$val.error, main = "Loss values")
p2 <- cvplot(res2$val.error.quantile, main = "Loss quantiles")
grid.arrange(p1, p2, ncol = 2)
omega1 <- gconcord(data = data, lambda1 = res1$lam1.optimal,
lambda2 = res1$lam2.optimal)
omega2 <- gconcord(data = data, lambda1 = res2$lam1.optimal,
lambda2 = res2$lam2.optimal)
p1 <- graphplot(omega1, edge.width = 0.5, varnames = colnames(data),
main = "Predictive risk")
p2 <- graphplot(omega2, edge.width = 0.5, varnames = colnames(data),
main = "Negative log-likelihood")
grid.arrange(p1, p2, ncol = 2)
# Define categories
All <- colnames(data)
Tech <- c("AAPL","CSCO","IBM","INTC","MSFT","V") ## Technology
Food <- c("HD","KO","MCD","NKE","PG","WMT")      ## Food
Pham <- c("JNJ","MRK","PFE","UNH")               ## Pharmaceuticals
Cons <- c("BA","CAT","MMM","UTX")                ## Construction
Fina <- c("AXP","GS","JPM","TRV")                ## Finance
Engy <- c("CVX","GE","XOM")                      ## Energy
Chem <- c("DWDP")                                ## Chemistry
Ettm <- c("DIS")                                 ## Entertainment
Tele <- c("VZ")                                  ## Telecommunication
# Construct prior penalty matrix Lambda
Lam <- matrix(100, ncol(data), ncol(data), dimnames = list(All, All))
Lam[Tech, Tech] <- 0.01
Lam[Food, Food] <- 0.02
Lam[Pham, Pham] <- 0.05
Lam[Cons, Cons] <- 0.01
Lam[Fina, Fina] <- 0.01
Lam[Engy, Engy] <- 0.03
Lam[Chem, Chem] <- 0.04
Lam[Ettm, Ettm] <- 0.05
Lam[Tele, Tele] <- 0.04
# Predictive risk loss function
res3 <- cv.gconcord(data = data, lam1.vec = Lam, K = 5)
par(mfrow=c(1,2))
cvplot(res3$val.error, ylab = "Loss values")
cvplot(res3$val.error.quantile, ylab = "Loss quantiles")
# Negative log-likelihood loss function
res4 <- cv.gconcord(data = data, lam1.vec = Lam, K = 5, FUN = negL)
par(mfrow=c(1,2))
cvplot(res4$val.error, ylab = "Loss values")
cvplot(res4$val.error.quantile, ylab = "Loss quantiles")
omega3 <- gconcord(data = data, lambda1 = res3$lam1.optimal, lambda2 = res3$lam2.optimal)
omega4 <- gconcord(data = data, lambda1 = res4$lam1.optimal, lambda2 = res4$lam2.optimal)
p1 <- graphplot(omega3, edge.width = 0.5, varnames = colnames(data),
main = "Predictive risk")
p2 <- graphplot(omega4, edge.width = 0.5, varnames = colnames(data),
main = "Negative log-likelihood")
grid.arrange(p1, p2, ncol = 2)
ans <- data.frame(p = rep(c(500, 800, 1000, 1500, 2000), each = 3),
gamma = rep(c(0.5, 1, 2), 5),
coordinate.wise = c("0.39/76", "0.35/75", "0.35/74",
"5.82/78", "6.68/82", "5.78/83",
"10.35/74", "14.33/102", "14.27/100",
"52.52/92", "52.62/92", "56.25/100",
"119.04/87", "104.35/76", "119.29/87"),
ista = c("0.16/52", "0.14/60", "0.11/50",
"0.46/57", "0.63/58", "0.49/49",
"0.77/52", "0.77/59", "0.87/65",
"2.22/69", "2.32/78", "2.04/70",
"4.17/59", "3.98/66", "3.94/64"),
fista = c("0.97/175", "1.42/268", "0.71/144",
"3.27/152", "4.30/174", "2.46/129",
"7.46/300", "5.86/248", "4.17/142",
"12.06/173", "11.53/163", "13.98/244",
"21.49/153",  "23.84/179", "25.14/219"))
library(dplyr)
ans %>%
kable(caption = "Running time comparison. For each case of p and gamma, running time in minutes / number of iterations are shown for cdws (coordinatewise descent), ISTA, and FISTA.") %>%
kable_styling(bootstrap_options = "striped")
library(knitr)
library(dplyr)
library(knitr)
ans %>%
kable(caption = "Running time comparison. For each case of p and gamma, running time in minutes / number of iterations are shown for cdws (coordinatewise descent), ISTA, and FISTA.") %>%
kable_styling(bootstrap_options = "striped")
?kable_styling
library(knitr)
?kable_styling
library(kableExtra)
install.packages("kableExtra")
library(dplyr)
library(knitr)
library(kableExtra)
ans %>%
kable(caption = "Running time comparison. For each case of p and gamma, running time in minutes / number of iterations are shown for cdws (coordinatewise descent), ISTA, and FISTA.") %>%
kable_styling(bootstrap_options = "striped")
library(gconcord)
devtools::document()
devtools::build()
expect_equal(10, 10)
## Test: coordinatewise
x <- matrix(c(
-0.57299987, -1.22881728,  0.24802264,  0.59779037,  0.65240208, 0.89373708,
0.84087632, -0.3383771 ,  0.0794175 ,  0.12716686, -0.97403288,-0.30804861,
0.13180135, -0.35350249,  0.01601294,  0.30258641,  0.19927309, 0.95847883,
0.44658609,  0.12839939, -2.36179304, -3.2224078 , -0.92297796,-1.55831917,
-1.00001779, -0.08302829,  0.6814525 ,  0.31812938, -0.50994963,-0.39614266,
-0.3653738 , -0.20899641,  0.33488842,  0.93276311,  0.18263188,-1.58771894,
0.53065032, -0.61604128, -0.67789621,  0.48183976,  0.20767173, 0.20307444,
-0.13368724, -0.12181896, -0.52881865, -0.91883273, -0.35672818,-0.09414685,
-1.23926047, -0.02615426, -1.02995135, -0.99250009, -0.89672846,-0.54350656,
-0.97725987, -0.95743644, -0.47911092, -0.22157924,  1.8751929 , 1.04114063,
1.4149165 ,  0.93326499, -0.09200369,  0.03342898,  1.71023076, 1.82671778,
0.19710653, -0.94066402, -1.15043928,  0.88932662,  0.3247554 ,-0.87942537
), nrow = 12, ncol = 6, byrow = TRUE)
S = cov(x)
omega = gconcord(S = S, lambda1 = 0.2, lambda2 = 0.05, method = "ista")
omega
res <- matrix(c(1.5218073, -0.4287108, 0, 0, 0, 0,
-0.4287108, 3.0763311, 0, 0.2834211, 0, 0,
0, 0, 1.7742381, -0.6702473, 0, -0.1005400,
0, 0.2834211, -06702473, 0.9537762, -0.0945475, 0,
0, 0, 0, -0.0945475, 1.2949636, -0.5363863,
0, 0, -0.10054, 0, -0.5363863, 1.0265789), nrow = 6, ncol = 6, byrow = TRUE)
library(gconcord)
devtools::test()
omega - res
devtools::test()
devtools::test()
devtools::test()
omega - res
omega
devtools::test()
devtools::test()
omega
res <- matrix(c( 1.5218073, -0.4287108,  0.0000000,  0.0000000,  0.0000000,  0.0000000,
-0.4287108,  3.0763311,  0.0000000,  0.2834211,  0.0000000,  0.0000000,
0.0000000,  0.0000000,  1.7742381, -0.6702473,  0.0000000, -0.1005400,
0.0000000,  0.2834211, -0.6702473,  0.9537762, -0.0945475,  0.0000000,
0.0000000,  0.0000000,  0.0000000, -0.0945475,  1.2949636, -0.5363863,
0.0000000,  0.0000000, -0.1005400,  0.0000000, -0.5363863,  1.0265789),
nrow = 6, ncol = 6, byrow = TRUE)
res
omega - res
library(gconcord)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
sum(abs(omega - res))
sum(abs(round(omega,4) - round(res,4)))
round(omega, 4)
round(res, 4)
round(omega,4) - round(res,4)
res <- matrix(c( 1.5218073, -0.4287108,  0.0000000,  0.0000000,  0.0000000,  0.0000000,
-0.4287108,  3.0763311,  0.0000000,  0.2834211,  0.0000000,  0.0000000,
0.0000000,  0.0000000,  1.7742381, -0.6702473,  0.0000000, -0.1005400,
0.0000000,  0.2834211, -0.6702473,  0.9567762, -0.0945475,  0.0000000,
0.0000000,  0.0000000,  0.0000000, -0.0945475,  1.2949636, -0.5363863,
0.0000000,  0.0000000, -0.1005400,  0.0000000, -0.5363863,  1.0265789),
nrow = 6, ncol = 6, byrow = TRUE)
sum(abs(omega - res))
devtools::test()
x <- matrix(c(
-0.57299987, -1.22881728,  0.24802264,  0.59779037,  0.65240208, 0.89373708,
0.84087632, -0.3383771 ,  0.0794175 ,  0.12716686, -0.97403288,-0.30804861,
0.13180135, -0.35350249,  0.01601294,  0.30258641,  0.19927309, 0.95847883,
0.44658609,  0.12839939, -2.36179304, -3.2224078 , -0.92297796,-1.55831917,
-1.00001779, -0.08302829,  0.6814525 ,  0.31812938, -0.50994963,-0.39614266,
-0.3653738 , -0.20899641,  0.33488842,  0.93276311,  0.18263188,-1.58771894,
0.53065032, -0.61604128, -0.67789621,  0.48183976,  0.20767173, 0.20307444,
-0.13368724, -0.12181896, -0.52881865, -0.91883273, -0.35672818,-0.09414685,
-1.23926047, -0.02615426, -1.02995135, -0.99250009, -0.89672846,-0.54350656,
-0.97725987, -0.95743644, -0.47911092, -0.22157924,  1.8751929 , 1.04114063,
1.4149165 ,  0.93326499, -0.09200369,  0.03342898,  1.71023076, 1.82671778,
0.19710653, -0.94066402, -1.15043928,  0.88932662,  0.3247554 ,-0.87942537
), nrow = 12, ncol = 6, byrow = TRUE)
S = cov(x)
print(gconcord(S = S, lambda1 = 0.2, lambda2 = 0.05, method = "ista"))
omega = gconcord(S = S, lambda1 = 0.2, lambda2 = 0.05, method = "ista")
res <- matrix(c( 1.5218073, -0.4287108,  0.0000000,  0.0000000,  0.0000000,  0.0000000,
-0.4287108,  3.0763311,  0.0000000,  0.2834211,  0.0000000,  0.0000000,
0.0000000,  0.0000000,  1.7742381, -0.6702473,  0.0000000, -0.1005400,
0.0000000,  0.2834211, -0.6702473,  0.9567762, -0.0945475,  0.0000000,
0.0000000,  0.0000000,  0.0000000, -0.0945475,  1.2949636, -0.5363863,
0.0000000,  0.0000000, -0.1005400,  0.0000000, -0.5363863,  1.0265789),
nrow = 6, ncol = 6, byrow = TRUE)
omega-res
devtools::test()
x <- matrix(c(
-0.57299987, -1.22881728,  0.24802264,  0.59779037,  0.65240208, 0.89373708,
0.84087632, -0.3383771 ,  0.0794175 ,  0.12716686, -0.97403288,-0.30804861,
0.13180135, -0.35350249,  0.01601294,  0.30258641,  0.19927309, 0.95847883,
0.44658609,  0.12839939, -2.36179304, -3.2224078 , -0.92297796,-1.55831917,
-1.00001779, -0.08302829,  0.6814525 ,  0.31812938, -0.50994963,-0.39614266,
-0.3653738 , -0.20899641,  0.33488842,  0.93276311,  0.18263188,-1.58771894,
0.53065032, -0.61604128, -0.67789621,  0.48183976,  0.20767173, 0.20307444,
-0.13368724, -0.12181896, -0.52881865, -0.91883273, -0.35672818,-0.09414685,
-1.23926047, -0.02615426, -1.02995135, -0.99250009, -0.89672846,-0.54350656,
-0.97725987, -0.95743644, -0.47911092, -0.22157924,  1.8751929 , 1.04114063,
1.4149165 ,  0.93326499, -0.09200369,  0.03342898,  1.71023076, 1.82671778,
0.19710653, -0.94066402, -1.15043928,  0.88932662,  0.3247554 ,-0.87942537
), nrow = 12, ncol = 6, byrow = TRUE)
S = cov(x)
print(gconcord(S = S, lambda1 = 0.2, lambda2 = 0.05, method = "ista"))
omega = gconcord(S = S, lambda1 = 0.2, lambda2 = 0.05, method = "ista")
res <- matrix(c( 1.5218073, -0.4287108,  0.0000000,  0.0000000,  0.0000000,  0.0000000,
-0.4287108,  3.0763311,  0.0000000,  0.2834211,  0.0000000,  0.0000000,
0.0000000,  0.0000000,  1.7742381, -0.6702473,  0.0000000, -0.1005400,
0.0000000,  0.2834211, -0.6702473,  0.9567762, -0.0945475,  0.0000000,
0.0000000,  0.0000000,  0.0000000, -0.0945475,  1.2949636, -0.5363863,
0.0000000,  0.0000000, -0.1005400,  0.0000000, -0.5363863,  1.0265789),
nrow = 6, ncol = 6, byrow = TRUE)
sum(abs(omega-res))
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
?cv.gconcord
set.seed(1)
cv = cv.gconcord(data = x, method = "ista")
cv$lam1.optimal
cv$lam2.optimal
devtools::test()
sum(abs(c(cv$lam1.optimal, cv$lam2.optimal) - c(0.4380915, 0.2602936)))
devtools::test()
devtools::test()
x <- matrix(c(
-0.57299987, -1.22881728,  0.24802264,  0.59779037,  0.65240208, 0.89373708,
0.84087632, -0.3383771 ,  0.0794175 ,  0.12716686, -0.97403288,-0.30804861,
0.13180135, -0.35350249,  0.01601294,  0.30258641,  0.19927309, 0.95847883,
0.44658609,  0.12839939, -2.36179304, -3.2224078 , -0.92297796,-1.55831917,
-1.00001779, -0.08302829,  0.6814525 ,  0.31812938, -0.50994963,-0.39614266,
-0.3653738 , -0.20899641,  0.33488842,  0.93276311,  0.18263188,-1.58771894,
0.53065032, -0.61604128, -0.67789621,  0.48183976,  0.20767173, 0.20307444,
-0.13368724, -0.12181896, -0.52881865, -0.91883273, -0.35672818,-0.09414685,
-1.23926047, -0.02615426, -1.02995135, -0.99250009, -0.89672846,-0.54350656,
-0.97725987, -0.95743644, -0.47911092, -0.22157924,  1.8751929 , 1.04114063,
1.4149165 ,  0.93326499, -0.09200369,  0.03342898,  1.71023076, 1.82671778,
0.19710653, -0.94066402, -1.15043928,  0.88932662,  0.3247554 ,-0.87942537
), nrow = 12, ncol = 6, byrow = TRUE)
S = cov(x)
#print(gconcord(S = S, lambda1 = 0.2, lambda2 = 0.05, method = "ista"))
omega.ista.s = gconcord(S = S, lambda1 = 0.2, lambda2 = 0.05, method = "fista")
omega.ista.s
omega.fista.s = gconcord(S = S, lambda1 = 0.2, lambda2 = 0.05, method = "fista")
omega.fista.x = gconcord(data = x, lambda1 = 0.2, lambda2 = 0.05, method = "fista")
res <- matrix(c( 1.5218073, -0.4287108,  0.0000000,  0.0000000,  0.0000000,  0.0000000,
-0.4287108,  3.0763311,  0.0000000,  0.2834211,  0.0000000,  0.0000000,
0.0000000,  0.0000000,  1.7742381, -0.6702473,  0.0000000, -0.1005400,
0.0000000,  0.2834211, -0.6702473,  0.9567762, -0.0945475,  0.0000000,
0.0000000,  0.0000000,  0.0000000, -0.0945475,  1.2949636, -0.5363863,
0.0000000,  0.0000000, -0.1005400,  0.0000000, -0.5363863,  1.0265789),
nrow = 6, ncol = 6, byrow = TRUE)
sum(abs(omega.fista.s-res))
omega.fista.x
res <- matrix(c( 1.5218076, -0.4287117,  0.0000000,  0.0000000,  0.0000000,  0.0000000,
-0.4287117,  3.0763367,  0.0000000,  0.2834277,  0.0000000,  0.0000000,
0.0000000,  0.0000000,  1.7742587, -0.6702672,  0.0000000, -0.1005383,
0.0000000,  0.2834277, -0.6702672,  0.9567892, -0.0945482,  0.0000000,
0.0000000,  0.0000000,  0.0000000, -0.0945482,  1.2949586, -0.5363746,
0.0000000,  0.0000000, -0.1005383,  0.0000000, -0.5363746,  1.0265743),
nrow = 6, ncol = 6, byrow = TRUE)
set.seed(1)
cv = cv.gconcord(data = x, method = "fista")
c(cv$lam1.optimal, cv$lam2.optimal)
devtools::test()
sum(abs(omega.fista.s-res))
sum(abs(omega.fista.s-res))
devtools::test()
?gconcord
x <- matrix(c(
-0.57299987, -1.22881728,  0.24802264,  0.59779037,  0.65240208, 0.89373708,
0.84087632, -0.3383771 ,  0.0794175 ,  0.12716686, -0.97403288,-0.30804861,
0.13180135, -0.35350249,  0.01601294,  0.30258641,  0.19927309, 0.95847883,
0.44658609,  0.12839939, -2.36179304, -3.2224078 , -0.92297796,-1.55831917,
-1.00001779, -0.08302829,  0.6814525 ,  0.31812938, -0.50994963,-0.39614266,
-0.3653738 , -0.20899641,  0.33488842,  0.93276311,  0.18263188,-1.58771894,
0.53065032, -0.61604128, -0.67789621,  0.48183976,  0.20767173, 0.20307444,
-0.13368724, -0.12181896, -0.52881865, -0.91883273, -0.35672818,-0.09414685,
-1.23926047, -0.02615426, -1.02995135, -0.99250009, -0.89672846,-0.54350656,
-0.97725987, -0.95743644, -0.47911092, -0.22157924,  1.8751929 , 1.04114063,
1.4149165 ,  0.93326499, -0.09200369,  0.03342898,  1.71023076, 1.82671778,
0.19710653, -0.94066402, -1.15043928,  0.88932662,  0.3247554 ,-0.87942537
), nrow = 12, ncol = 6, byrow = TRUE)
S = cov(x)
#print(gconcord(S = S, lambda1 = 0.2, lambda2 = 0.05, method = "ista"))
omega.s = gconcord(S = S, lambda1 = 0.2, lambda2 = 0.05, method = "coordinatewise")
omega.x = gconcord(data = x, lambda1 = 0.2, lambda2 = 0.05, method = "coordinatewise")
omega.s
res <- matrix(c( 1.5218077, -0.4287111,  0.0000000,  0.0000000,  0.0000000,  0.0000000,
-0.4287111,  3.0763360,  0.0000000,  0.2834247,  0.0000000,  0.0000000,
0.0000000,  0.0000000,  1.7742533, -0.6702583,  0.0000000, -0.1005374,
0.0000000,  0.2834247, -0.6702583,  0.9567856, -0.0945463,  0.0000000,
0.0000000,  0.0000000,  0.0000000, -0.0945463,  1.2949671, -0.5363858,
0.0000000,  0.0000000, -0.1005374,  0.0000000, -0.5363858,  1.0265813),
nrow = 6, ncol = 6, byrow = TRUE)
sum(abs(omega.s-res))
set.seed(1)
cv = cv.gconcord(data = x, method = "coordinatewise")
c(cv$lam1.optimal, cv$lam2.optimal)
devtools::test()
devtools::document()
devtools::test()
devtools::build()
?return
devtools::document()
devtools::build()
?return
?return
devtools::test()
